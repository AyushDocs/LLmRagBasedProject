[
    {
      "name": "analyze_sentiment",
      "description": "Analyze the sentiment of a given text into GOOD, BAD, or NEUTRAL using OpenAI's GPT-4o-mini model.",
      "parameters": {
        "type": "object",
        "properties": {
          "text": {
            "type": "string",
            "description": "The text to analyze for sentiment."
          }
        },
        "required": ["text"]
      }
    },
    {
      "name": "generate_random_addresses",
      "description": "Generate random US addresses in a structured JSON format using OpenAI's GPT-4o-mini model.",
      "parameters": {
        "type": "object",
        "properties": {
          "count": {
            "type": "integer",
            "description": "The number of random addresses to generate."
          }
        },
        "required": ["count"]
      }
    },
    {
      "name": "extract_text_from_image",
      "description": "Extract text from an image using OpenAI's GPT-4o-mini vision model.",
      "parameters": {
        "type": "object",
        "properties": {
          "image_url": {
            "type": "string",
            "description": "The base64-encoded URL of the image to process."
          }
        },
        "required": ["image_url"]
      }
    },
    {
      "name": "generate_text_embeddings",
      "description": "Generate text embeddings for a list of phrases using OpenAI's text-embedding-3-small model.",
      "parameters": {
        "type": "object",
        "properties": {
          "phrases": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of phrases to generate embeddings for."
          }
        },
        "required": ["phrases"]
      }
    },
    {
      "name": "find_most_similar_phrases",
      "description": "Find the most similar pair of phrases based on their embeddings.",
      "parameters": {
        "type": "object",
        "properties": {
          "embeddings": {
            "type": "object",
            "additionalProperties": {
              "type": "array",
              "items": {
                "type": "number"
              }
            },
            "description": "A dictionary where keys are phrases and values are their embeddings as arrays of floats."
          }
        },
        "required": ["embeddings"]
      }
    },
    {
      "name": "semantic_search_documents",
      "description": "Perform semantic search on a set of documents using OpenAI's text-embedding-3-small model.",
      "parameters": {
        "type": "object",
        "properties": {
          "docs": {
            "type": "array",
            "items": {
              "type": "string"
            },
            "description": "The list of document texts to search through."
          },
          "query": {
            "type": "string",
            "description": "The query string to match against the documents."
          }
        },
        "required": ["docs", "query"]
      }
    },
    {
      "name": "map_query_to_function",
      "description": "Map a query to a predefined function and extract parameters from the query text.",
      "parameters": {
        "type": "object",
        "properties": {
          "query": {
            "type": "string",
            "description": "The query text to analyze and map to a function."
          }
        },
        "required": ["query"]
      }
    },
    {
      "name": "bypass_llm_restriction",
      "description": "Attempt to bypass an LLM's restriction by crafting a clever prompt.",
      "parameters": {
        "type": "object",
        "properties": {
          "prompt": {
            "type": "string",
            "description": "The crafted prompt to test the LLM's adherence to restrictions."
          }
        },
        "required": ["prompt"]
      }
    }
  ]